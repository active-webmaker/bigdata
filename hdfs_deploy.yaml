- name: PV Folder Test
  hosts: all
  become: true
  vars:
    pvs:
      - path: "/mnt/block-storage1"
        folder: "hdfs0"
        node: master_node

      - path: "/mnt/block-storage2"
        folder: "hdfs1"
        node: master_node

      - path: "/mnt/block-storage3"
        folder: "hdfs2"
        node: bigdata102

      - path: "/mnt/block-storage4"
        folder: "hdfs3"
        node: bigdata102

  tasks:
    - name: Ensure PV folders exist for each node
      file:
        path: "{{ item.path }}/{{ item.folder }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      with_items: "{{ pvs }}"
      when: inventory_hostname == item.node



- name: hdfs deploy apply 
  hosts: master
  become: true
  vars:
    hdfs_app_name: hdfs
    hdfs_storage_name: hdfs-storage-class
    hdfs_replicas: 3
    hdfs_image_name: bigtop:latest

    pvs:
      - name: hdfs-pv-data-0
        size: 10Gi
        access_modes: ReadWriteOnce
        path: "/mnt/block-storage1"
        folder: "hdfs0"
        node: master_node

      - name: hdfs-pv-data-1
        size: 10Gi
        access_modes: ReadWriteOnce
        path: "/mnt/block-storage2"
        folder: "hdfs1"
        node: master_node

      - name: hdfs-pv-data-2
        size: 10Gi
        access_modes: ReadWriteOnce
        path: "/mnt/block-storage3"
        folder: "hdfs2"
        node: bigdata102

      - name: hdfs-pv-data-3
        size: 10Gi
        access_modes: ReadWriteOnce
        path: "/mnt/block-storage4"
        folder: "hdfs3"
        node: bigdata102
  

  tasks:
    - name: Set HDFS PersistentVolume
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: "{{ item.name }}"
          spec:
            capacity:
              storage: "{{ item.size }}"
            accessModes:
              - "{{ item.access_modes }}"
            persistentVolumeReclaimPolicy: Retain
            hostPath:
              path: "{{ item.path }}/{{ item.folder }}"
            nodeSelector:
              kubernetes.io/hostname: "{{ item.node }}"
      with_items: "{{ pvs }}"


    - name: Deploy hdfs StatefulSet
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: StatefulSet
          metadata:
            name: "{{ hdfs_app_name }}"
          spec:
            serviceName: "{{ hdfs_app_name }}"
            replicas: "{{ hdfs_replicas }}"
            selector:
              matchLabels:
                app: "{{ hdfs_app_name }}"
            template:
              metadata:
                labels:
                  app: "{{ hdfs_app_name }}"
              spec:
                initcontainers:
                - name: "{{ hdfs_app_name }}"
                  image: "{{ hdfs_image_name }}"
                  command:
                  - /bin/bash
                  - -c
                  - |
                    if [[ "$(hostname)" == "{{ hdfs_app_name }}-0" ]]; then
                        echo "Formatting NameNode..."
                        hdfs namenode -format -nonInteractive || echo "Already formatted"
                    fi
                containers:
                - name: "{{ hdfs_app_name }}"
                  image: "{{ hdfs_image_name }}"
                  command:
                  - /bin/bash
                  - -c
                  - |
                    if [[ "$(hostname)" == "{{ hdfs_app_name }}-0" ]]; then
                        echo "Starting NameNode"
                        hdfs namenode
                    else
                        echo "Starting DataNode"
                        hdfs datanode
                    fi
                  ports:
                  - containerPort: 50070  # NameNode Web UI
                  - containerPort: 50075  # DataNode
                volumeMounts:
                - name: hdfs-storage
                  mountPath: /data/hdfs
            volumeClaimTemplates:
            - metadata:
                name: hdfs-storage
              spec:
                accessModes: ["ReadWriteOnce"]
                resources:
                  requests:
                    storage: "{{ hdfs_storage_size }}"
                volumeName: "hdfs-pv-data-$(pod.ordinal)"


    - name: Expose NameNode Service
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: hdfs-namenode-service
          spec:
            selector:
              app: "{{ hdfs_app_name }}"
            ports:
              - protocol: TCP
                port: 50070
                targetPort: 50070
            type: NodePort


    - name: Expose DataNode Service
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: hdfs-datanode-service
          spec:
            selector:
              app: "{{ hdfs_app_name }}"
            ports:
              - protocol: TCP
                port: 50075
                targetPort: 50075
            type: ClusterIP