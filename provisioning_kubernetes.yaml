- name: Kubernetes Install
  hosts: all
  become: true
  vars:
    kubernetes_version: 1.30.7-1.1

  tasks:
    # 쿠버네티스 파트 시작
    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg
        state: present

    - name: Create Directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Kubernetes GPG key
      shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor --yes -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: chmod Kubernetes GPG key
      shell: sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes apt repository
      shell: echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

    - name: chmod Kubernetes apt repository
      shell: sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list

    - name: Update apt cache
      apt:
        update_cache: yes
        force_apt_get: yes

    - name: Install Kubernetes
      apt:
        name:
          - kubelet={{ kubernetes_version }}
          - kubeadm={{ kubernetes_version }}
          - kubectl={{ kubernetes_version }}
        state: present
      args:
        allow_downgrade: yes
      notify: restart kubelet

    - name: Hold Kubernetes version
      command: apt-mark hold kubelet kubeadm kubectl


- name: Kubernetes init
  hosts: master
  become: true
  vars:
    kubernetes_version: "1.30"
    Master_node: 158.247.252.37

  tasks:
    - name: Check Kubernetes init excuted
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_conf_status

    - name: init Kubernetes master node
      command: kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-cert-extra-sans="{{ Master_node }}" --ignore-preflight-errors=NumCPU,Mem
      register: kubeadm_init_output
      when: not kubelet_conf_status.stat.exists

    - name: Capture join command
      set_fact:
        join_command: "{{ kubeadm_init_output.stdout_lines | regex_search('kubeadm join .*') }}"
      when: not kubelet_conf_status.stat.exists

    - name: Save join command to a file
      local_action: # 로컬 머신에서 실행
        module: copy
        content: "{{ join_command }}"
        dest: /tmp/kubeadm_join_command.txt 
      when: not kubelet_conf_status.stat.exists

    - name: Set kubeconfig for root
      shell: |
        mkdir -p $HOME/.kube
        cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
        chown $(id -u):$(id -g) $HOME/.kube/config
      when: not kubelet_conf_status.stat.exists

    - name: Apply Flannel CNI plugin
      shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
      when: not kubelet_conf_status.stat.exists


- name: Kubernetes join
  hosts: worker
  become: true
  vars:
    kubernetes_version: "1.30"
    Master_node: 158.247.252.37

  tasks:
    - name: Check Kubernetes join executed
      stat:
        path: /var/lib/kubelet/config.yaml
      register: kubelet_conf_yaml_status

    - name: Read join command from the file
      local_action: # 로컬 머신에서 파일 읽기
        module: slurp
        src: /tmp/kubeadm_join_command.txt
      register: join_command_file
      when: not kubelet_conf_yaml_status.stat.exists

    - name: Join Kubernetes worker node
      shell: "{{ join_command_file['content'] }}"
      when: not kubelet_conf_yaml_status.stat.exists