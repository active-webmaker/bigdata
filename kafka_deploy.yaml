- name: PV Folder Test
  hosts: all
  become: true
  vars:
    pvs:
      - path: "/mnt/block-storage1"
        folder: "kafka0"
        node: master_node

      - path: "/mnt/block-storage3"
        folder: "kafka1"
        node: bigdata102


  task:
    - name: Ensure PV folders exist for each node
      file:
        path: "{{ item.path }}/{{ item.folder }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      with_items: "{{ pvs }}"
      when: inventory_hostname == item.node



- name: kafka deploy apply 
  hosts: master
  become: true
  vars:
    kafka_app_name: kafka
    kafka_replicas: 2
    kafka_image_name: bigtop:latest

    pvs:
      - name: kafka-pv-data-0
        size: 1Gi
        access_modes: ReadWriteOnce
        path: "/mnt/block-storage1"
        folder: "kafka0"
        node: master_node

      - name: kafka-pv-data-1
        size: 1Gi
        access_modes: ReadWriteOnce
        path: "/mnt/block-storage3"
        folder: "kafka1"
        node: bigdata102
  

  tasks:
    - name: Set kafka PersistentVolume
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: "{{ item.name }}"
          spec:
            capacity:
              storage: "{{ item.size }}"
            accessModes:
              - "{{ item.access_modes }}"
            persistentVolumeReclaimPolicy: Retain
            hostPath:
              path: "{{ item.path }}/{{ item.folder }}"
            nodeSelector:
              kubernetes.io/hostname: "{{ item.node }}"
      with_items: "{{ pvs }}"



    - name: Deploy Kafka StatefulSet
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: StatefulSet
          metadata:
            name: "{{ kafka_app_name }}"
          spec:
            serviceName: "{{ kafka_app_name }}"
            replicas: "{{ kafka_replicas }}"
            selector:
              matchLabels:
                app: "{{ kafka_app_name }}"
            template:
              metadata:
                labels:
                  app: "{{ kafka_app_name }}"
              spec:
                containers:
                - name: "{{ kafka_app_name }}"
                  image: "{{ kafka_image_name }}"
                  ports:
                  - containerPort: 9092
                    name: broker
                  env:
                  - name: KAFKA_CFG_ZOOKEEPER_CONNECT
                    value: "zookeeper:2181"
                  - name: ALLOW_PLAINTEXT_LISTENER
                    value: "yes"
                  volumeMounts:
                  - name: kafka-storage
                    mountPath: /bitnami/kafka
            volumeClaimTemplates:
            - metadata:
                name: kafka-storage
              spec:
                accessModes: ["ReadWriteOnce"]
                resources:
                  requests:
                    storage: 1Gi
                volumeName: kafka-pv-data-$(pod.ordinal)


    - name: Expose the kafka StatefulSet as a service
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: kafka-service
          spec:
            selector:
              app: "{{ kafka_app_name }}"
            ports:
              - protocol: TCP
                port: 9092
                targetPort: 9092
            type: LoadBalancer